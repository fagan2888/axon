import xml.etree.cElementTree as ET
import logging
from xml_get import get_node_text_value
from retrying import retry

from sbb_api import query_sbb_api

from vibepy.send_email import send_email


def retry_on_oserror(exc):
    return isinstance(exc, OSError)


@retry(retry_on_exception=retry_on_oserror, wait_exponential_multiplier=1000, wait_exponential_max=10000,
       stop_max_delay=30000)
def eval_response(params, CONFIG):

    response = query_sbb_api(params, CONFIG)

    if response.status_code == 200:
        return response
    else:
        err_type = eval_error_type(response, params, CONFIG)

        # Not sure if the errors have to be raised in this function or if they can happne in a nested one
        if err_type == 'retry':
            raise OSError
        elif err_type == 'skip':
            return None
        else:
            raise RuntimeError  # These errors should crash properly without retry


def eval_error_type(response, params, CONFIG):
    """
    Different 500 errors can occur - Below is the v1 documentation (we're using v2) so might be out of date

    FahrplanService_V1_0.wsdl

    SBB successfully operates an online timetable that can be used to perform timetable enquiries and query
    arrival/departure tables, trains/services and other information. The web service enables third parties to query this
    information via a standardised interface and use it in their own applications. In the event of an error, a SOAP
    fault is generated with associated error code. The following error codes are available:

    - SPF-0000: General error. Unidentified cause.
    - SPF-1000: Timetable system responding with error status code. The timetable system's error code is appended to the
                code generated by the timetable service, e.g. SPF_1000_K9260
    - SPF-1001: Technical error during timetable system query, occurs e.g. if the timetable system is unavailable.
    - SPF-2000: Validation error. The request does not conform to the schema.
    - SPF-3000: Error interpreting query. The query is valid but cannot be interpreted.
    - SPF-3100: Error interpreting timetable system response. The timetable system has supplied a response that cannot
                be interpreted.
    - SPF-5000: Not authorised to carry out this operation.
    - SPF-9000: Search query does not contain any entries.


    Known messages / codes that have been encountered so far:

    SPF-1000_C1
    Fahrplansystem Error
    Communication: No server found accepting us. (server is down?)

    SPF-1000_W-K890
    Fahrplansystem Error
    No connections found.

    SPF-1000_F2
    Fahrplansystem Error
    Spool: Error writing the spoolfile.

    SPF-3000
    Request Transformation error
    WSINPHDR:SOAP_Extract

    :param response:
    :param params:
    :return:
    """

    logging.debug(response.content)

    # TODO : this should output proper error logs based on the output from SBB.
    # TODO : The different kind of errors should be pushed to a statsd counter so we can monitor them

    try:
        root = ET.fromstring(response.content)

        # Get the SBB error code (all errors are labeled as 500 in the response)
        error_code_path = ['soapenv:Envelope ',
                           'soapenv:Body',
                           'soapenv:Fault',
                           'faultcode']
        error_code = get_node_text_value(root, error_code_path)

        # Get the SBB error code (all errors are labeled as 500 in the response)
        error_string_path = ['soapenv:Envelope ',
                             'soapenv:Body',
                             'soapenv:Fault',
                             'faultstring']
        error_string = get_node_text_value(root, error_string_path)

        # Get the message associated with the error
        error_msg_path = ['soapenv:Envelope ',
                          'soapenv:Body',
                          'soapenv:Fault',
                          'detail'
                          'NS5:technicalDetails',
                          'text']
        error_msg = get_node_text_value(root, error_msg_path)

        logging.error('Query failed, ERROR {e}'.format(e=response.status_code))
        logging.error('SBB API Error/Fault (Code : String - Technical Details), {c} : {s} - {m}'.format(c=error_code,
                                                                                                        s=error_string,
                                                                                                        m=error_msg))
        logging.error('Parameters supplies: \n{q}'.format(q=params))
        logging.error('Full response: \n{r}'.format(r=response.content))

        # decide on output behavior:
        #   RETRY / EXIT / SKIP
        if error_code == 'SPF-1000_C1':
            return 'retry'
        elif error_code == 'SPF-1000_F2':
            return 'retry'
        elif error_code == 'SPF-3000':
            return 'retry'
        elif error_code == 'SPF-1000_W-K890':
            return 'skip'

    except:
        send_email('Error processing SBB API response:\n{r}'.format(r=response.content), CONFIG)

    return None
